type BreedingRecord = record {
  id : nat64;
  date : nat64;
  created_at : nat64;
  pig_id : nat64;
  mate_id : nat64;
  offspring_count : nat64;
};
type BreedingRecordPayload = record {
  date : nat64;
  pig_id : nat64;
  mate_id : nat64;
  offspring_count : nat64;
};
type Feed = record {
  id : nat64;
  feed_type : text;
  date : nat64;
  created_at : nat64;
  pig_id : nat64;
  quantity : float64;
};
type FeedPayload = record {
  feed_type : text;
  date : nat64;
  pig_id : nat64;
  quantity : float64;
};
type HealthRecord = record {
  id : nat64;
  veterinarian : text;
  date : nat64;
  description : text;
  created_at : nat64;
  pig_id : nat64;
};
type HealthRecordPayload = record {
  veterinarian : text;
  date : nat64;
  description : text;
  pig_id : nat64;
};
type Inventory = record {
  id : nat64;
  cost : float64;
  item_name : text;
  created_at : nat64;
  quantity : nat64;
};
type InventoryPayload = record {
  cost : float64;
  item_name : text;
  quantity : nat64;
};
type Invoice = record {
  id : nat64;
  date : nat64;
  created_at : nat64;
  customer_id : nat64;
  amount : float64;
};
type InvoicePayload = record {
  date : nat64;
  customer_id : nat64;
  amount : float64;
};
type Notification = record {
  id : nat64;
  is_read : bool;
  date : nat64;
  customer_id : nat64;
  message : text;
};
type NotificationPayload = record { customer_id : nat64; message : text };
type Pig = record {
  id : nat64;
  weight : float64;
  name : text;
  created_at : nat64;
  health_status : text;
  breed : text;
  birth_date : nat64;
};
type PigPayload = record {
  weight : float64;
  name : text;
  health_status : text;
  breed : text;
  birth_date : nat64;
};
type Result = variant { Ok : Inventory; Err : text };
type Result_1 = variant { Ok : Pig; Err : text };
type Result_10 = variant { Ok : vec Inventory; Err : text };
type Result_11 = variant { Ok : vec Invoice; Err : text };
type Result_12 = variant { Ok : vec Notification; Err : text };
type Result_13 = variant { Ok : vec Pig; Err : text };
type Result_2 = variant { Ok : BreedingRecord; Err : text };
type Result_3 = variant { Ok : Feed; Err : text };
type Result_4 = variant { Ok : HealthRecord; Err : text };
type Result_5 = variant { Ok : Invoice; Err : text };
type Result_6 = variant { Ok : Notification; Err : text };
type Result_7 = variant { Ok : vec BreedingRecord; Err : text };
type Result_8 = variant { Ok : vec Feed; Err : text };
type Result_9 = variant { Ok : vec HealthRecord; Err : text };
service : {
  add_inventory_item : (InventoryPayload) -> (Result);
  add_pig : (PigPayload) -> (Result_1);
  create_breeding_record : (BreedingRecordPayload) -> (Result_2);
  create_feed : (FeedPayload) -> (Result_3);
  create_health_record : (HealthRecordPayload) -> (Result_4);
  create_invoice : (InvoicePayload) -> (Result_5);
  create_notification : (NotificationPayload) -> (Result_6);
  get_all_breeding_records : () -> (Result_7) query;
  get_all_feeds : () -> (Result_8) query;
  get_all_health_records : () -> (Result_9) query;
  get_all_inventory_items : () -> (Result_10) query;
  get_all_invoices : (nat64) -> (Result_11) query;
  get_all_notifications : (nat64) -> (Result_12) query;
  get_all_pigs : () -> (Result_13) query;
  get_breeding_records : (nat64) -> (Result_7) query;
  get_mate_breeding_records : (nat64) -> (Result_7) query;
  update_pig : (nat64, PigPayload) -> (Result_1);
}
